"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[953],{8361:(e,n,t)=>{t.r(n),t.d(n,{data:()=>s});const s={key:"v-e67249a8",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%85%A8%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2.html",title:"第十七章：全文本搜索",lang:"en-US",frontmatter:{title:"第十七章：全文本搜索",lang:"en-US"},excerpt:"",headers:[{level:2,title:"使用全文本搜索",slug:"使用全文本搜索",children:[]},{level:2,title:"启用全文本搜索 MATCH() AGAINST()",slug:"启用全文本搜索-match-against",children:[]},{level:2,title:"使用扩展搜索 WITH QUERY EXPANSION",slug:"使用扩展搜索-with-query-expansion",children:[]},{level:2,title:"布尔文本搜索 IN BOOLEAN MODE",slug:"布尔文本搜索-in-boolean-mode",children:[]},{level:2,title:"全文本搜索的使用说明",slug:"全文本搜索的使用说明",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第十七章：全文本搜索.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},2245:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});const s=(0,t(6252).uE)('<h1 id="第十七章-全文本搜索" tabindex="-1"><a class="header-anchor" href="#第十七章-全文本搜索" aria-hidden="true">#</a> 第十七章：全文本搜索</h1><blockquote><p><strong>引擎支持全文本搜索：</strong> <code>Mysql</code> 支持几种基本的数据库引擎。并非所有的引擎都支持，最常用的两个是 <code>MyISAM</code> 和 <code>InnoDB</code>; 前者支持全文本支持，后者则不行。在我们创建表的时候（<code>productnotes表</code>）使用的是 <code>MyISAM</code>。</p></blockquote><p>LIKE关键字，它利用通配操作符匹配文本（和部分文本）。使用LIKE，能够查找包含特殊值或部分值的行（不管这些值位于列内什么位置）。</p><p>正则篇章，用基于文本的搜索作为正则表达式匹配列值的更进一步的介绍。使用正则表达式，可以编写查找所需行的非常复杂的匹配模式。</p><p>搜索机制的限制：</p><ul><li>性能——通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。</li><li>明确控制——使用通配符和正则表达式匹配，很难（而且并不总是能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。</li><li>智能化的结果——虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。例如，一个特殊词的搜索将会返回包含该词的所有行，而不区分包含单个匹配的行和包含多个匹配的行（按照可能是更好的匹配来排列它们）。类似，一个特殊词的搜索将不会找出不包含该词但包含其他相关词的行。</li></ul><p>所有这些限制以及更多的限制都可以用全文本搜索来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地决定哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。</p><h2 id="使用全文本搜索" tabindex="-1"><a class="header-anchor" href="#使用全文本搜索" aria-hidden="true">#</a> 使用全文本搜索</h2><p>为了进行全文本搜索，必须索引被搜索的列，而且要随着数据的改变不断地重新索引。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。</p><p>在索引之后，SELECT可与Match()和Against()一起使用以实际执行搜索</p><h2 id="启用全文本搜索-match-against" tabindex="-1"><a class="header-anchor" href="#启用全文本搜索-match-against" aria-hidden="true">#</a> 启用全文本搜索 <code>MATCH() AGAINST()</code></h2><p>一般在创建表时启用全文本搜索。CREATE TABLE语句接受FULLTEXT子句，它给出被索引列的一个逗号分隔的列表。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>CREATE TABLE productnotes(\n  note_id    int           NOT NULL AUTO_INCREMENT,\n  prod_id    char(10)      NOT NULL,\n  note_date datetime       NOT NULL,\n  note_text  text          NULL ,\n  PRIMARY KEY(note_id),\n  FULLTEXT(note_text) -- 开启全文本搜索\n) ENGINE=MyISAM;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>为了进行全文本搜索，MySQL根据子句FULLTEXT(note_text)的指示对它进行索引。这里的FULLTEXT索引单个列，如果需要也可以指定多个列。</p><p>在定义之后，MySQL自动维护该索引。在增加、更新或删除行时，索引随之自动更新。</p><blockquote><p><strong>不要在导入数据时使用FULLTEXT</strong> 更新索引要花时间，虽然不是很多，但毕竟要花时间。如果正在导入数据到一个新表，此时不应该启用FULLTEXT索引。应该首先导入所有数据，然后再修改表，定义FULLTEXT。这样有助于更快地导入数据（而且使索引数据的总时间小于在导入每行时分别进行索引所需的总时间）。</p></blockquote><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT note_text\nFROM productnotes\nWHERE match(note_text) Against(&quot;rabbit&quot;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229324.png" alt="image-20211022173016904"></p><p>此SELECT语句检索单个列note_text。由于WHERE子句，一个全文本搜索被执行。Match(note_text)指示MySQL针对指定的列进行搜索，Against(&#39;rabbit&#39;)指定词rabbit作为搜索文本。</p><blockquote><p>使用完整的 Match() 说 明 传递给 Match() 的值必须与FULLTEXT()定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。</p></blockquote><h2 id="使用扩展搜索-with-query-expansion" tabindex="-1"><a class="header-anchor" href="#使用扩展搜索-with-query-expansion" aria-hidden="true">#</a> 使用扩展搜索 <code>WITH QUERY EXPANSION</code></h2><p>查询扩展用来设法放宽所返回的全文本搜索结果的范围。考虑下面的情况。你想找出所有提到anvils的注释。只有一个注释包含词anvils，但你还想找出可能与你的搜索有关的所有其他行，即使它们不包含词anvils。</p><p>这也是查询扩展的一项任务。在使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：</p><ul><li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</li><li>其次，MySQL检查这些匹配行并选择所有有用的词（我们将会简要地解释MySQL如何断定什么有用，什么无用）。</li><li>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。</li></ul><p>格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT column1, column2\nFROM table1\nWHERE MATCH(column1,column2) \n      AGAINST(&#39;keyword&#39;,WITH QUERY EXPANSION);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT note_text\nFROM productnotes\nWHERE match(note_text) against(&quot;anvils&quot; WITH QUERY EXPANSION);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229325.png" alt="image-20211022180953496"></p><p>这次返回了7行。第一行包含词anvils，因此等级最高。第二行与anvils无关，但因为它包含第一行中的两个词（customer和recommend），所以也被检索出来。第3行也包含这两个相同的词，但它们在文本中的位置更靠后且分开得更远，因此也包含这一行，但等级为第三。第三行确实也没有涉及anvils（按它们的产品名）。</p><p>正如所见，查询扩展极大地增加了返回的行数，但这样做也增加了你实际上并不想要的行的数目。</p><blockquote><p><strong>行越多越好：</strong> 表中的行越多（这些行中的文本就越多），使用查询扩展返回的结果越好。</p></blockquote><h2 id="布尔文本搜索-in-boolean-mode" tabindex="-1"><a class="header-anchor" href="#布尔文本搜索-in-boolean-mode" aria-hidden="true">#</a> 布尔文本搜索 <code>IN BOOLEAN MODE</code></h2><p>MySQL支持全文本搜索的另外一种形式，称为布尔方式（boolean mode）。以布尔方式，可以提供关于如下内容的细节：</p><ul><li>要匹配的词；</li><li>要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li><li>排列提示（指定某些词比其他词更重要，更重要的词等级更高）；</li><li>表达式分组；</li><li>另外一些内容。</li></ul><blockquote><p><strong>即使没有FULLTEXT索引也可以使用：</strong> 布尔方式不同于迄今为止使用的全文本搜索语法的地方在于，即使没有定义FULLTEXT索引，也可以使用它。但这是一种非常缓慢的操作（其性能将随着数据量的增加而降低）</p></blockquote><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT note_text\nFROM productnotes\nWHERE match(note_text) against(&quot;heavy&quot; IN BOOLEAN MODE);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229326.png" alt="image-20211022181025750"></p><blockquote><p>IN BOOLEAN MODE的行为差异 虽然这个例子的结果与没有IN BOOLEAN MODE的相同，但其行为有一个重要的差别（即使在这个特殊的例子没有表现出来）。</p></blockquote><p><strong>为了匹配包含heavy但不包含任意以rope开始的词的行:</strong></p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT note_text\nFROM productnotes\nWHERE match(note_text) against(&quot;heavy -rope*&quot; IN BOOLEAN MODE);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229327.png" alt="image-20211022181930848"></p><p><strong>全文本布尔操作符</strong></p><table><thead><tr><th>布尔操作符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>包含，词必须存在</td></tr><tr><td>-</td><td>排除，词必须不出现</td></tr><tr><td>&gt;</td><td>包含，而且增加等级值</td></tr><tr><td>&lt;</td><td>包含，而且增加等级值</td></tr><tr><td>()</td><td>把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）</td></tr><tr><td>~</td><td>取消一个词的排序值</td></tr><tr><td>*</td><td>词尾的通配符</td></tr><tr><td>&quot;&quot;</td><td>定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</td></tr></tbody></table><h2 id="全文本搜索的使用说明" tabindex="-1"><a class="header-anchor" href="#全文本搜索的使用说明" aria-hidden="true">#</a> 全文本搜索的使用说明</h2><ul><li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li><li>MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参阅MySQL文档以了解如何完成此工作）。</li><li>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE。</li><li>如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词或者不出现，或者至少出现在50%的行中）。</li><li>忽略词中的单引号。例如，don&#39;t索引为dont。</li><li>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li><li>如前所述，仅在MyISAM数据库引擎中支持全文本搜索。</li></ul>',45),a={},l=(0,t(3744).Z)(a,[["render",function(e,n){return s}]])},3744:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,s]of n)t[e]=s;return t}}}]);