"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[35],{8426:(l,e,i)=>{i.r(e),i.d(e,{data:()=>s});const s={key:"v-2c23fbb3",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E6%94%B9%E5%96%84%E6%80%A7%E8%83%BD.html",title:"第二十八章：改善性能",lang:"en-US",frontmatter:{title:"第二十八章：改善性能",lang:"en-US"},excerpt:"",headers:[],filePathRelative:"guide/《Mysql必知必会》/第二十八章：改善性能.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},6218:(l,e,i)=>{i.r(e),i.d(e,{default:()=>n});const s=(0,i(6252).uE)('<h1 id="第二十八章-改善性能" tabindex="-1"><a class="header-anchor" href="#第二十八章-改善性能" aria-hidden="true">#</a> 第二十八章：改善性能</h1><p>在诊断应用的滞缓现象和性能问题时，性能不良的数据库（以及数据库查询）通常是最常见的祸因。</p><p>可以看出，Mysql的性能是一个值得探讨和分析的问题。</p><ul><li>首先，MySQL（与所有DBMS一样）具有特定的硬件建议。在学习和研究MySQL时，使用任何旧的计算机作为服务器都可以。但对用于生产的服务器来说，应该坚持遵循这些硬件建议。</li><li>一般来说，关键的生产DBMS应该运行在自己的专用服务器上。</li><li>MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用SHOW VARIABLES;和SHOW STATUS;）</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SHOW variables;\nSHOW status;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202111021756861.png" alt="image-20211102175632827"></p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202111021756932.png" alt="image-20211102175643910"></p><ul><li>MySQL一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用SHOW PROCESSLIST显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用KILL命令终结某个特定的进程（使用这个命令需要作为管理员登录）。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SHOW processlist;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202111021757648.png" alt="image-20211102175730621"></p><ul><li>总是有不止一种方法编写同一条SELECT语句。应该试验联结、并、子查询等，找出最佳的方法。</li><li>使用<strong>EXPLAIN语句</strong>让MySQL解释它将如何执行一条SELECT语句。</li><li>一般来说，存储过程执行得比一条一条地执行其中的各条MySQL语句快。</li><li>应该总是使用正确的数据类型。</li><li>决不要检索比需求还要多的数据。换言之，不要用SELECT *（除非你真正需要每个列）。</li><li>有的操作（包括INSERT）支持一个可选的DELAYED关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li><li>在导入数据时，应该关闭自动提交。你可能还想删除索引（包括FULLTEXT索引），然后在导入完成后再重建它们。</li><li>必须索引数据库表以改善数据检索的性能。确定索引什么不是一件微不足道的任务，需要分析使用的SELECT语句以找出重复的WHERE和ORDER BY子句。如果一个简单的WHERE子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li><li>你的SELECT语句中有一系列复杂的OR条件吗？通过使用多条SELECT语句和连接它们的<strong>UNION语句</strong>，你能看到极大的性能改进。</li><li>索引改善数据检索的性能，但损害数据插入、删除和更新的性能。如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除。）</li><li>LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。</li><li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li><li>最重要的规则就是，每条规则在某些条件下都会被打破。</li></ul>',11),a={},n=(0,i(3744).Z)(a,[["render",function(l,e){return s}]])},3744:(l,e)=>{e.Z=(l,e)=>{const i=l.__vccOpts||l;for(const[l,s]of e)i[l]=s;return i}}}]);