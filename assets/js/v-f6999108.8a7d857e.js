"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[37],{4841:(e,l,a)=>{a.r(l),a.d(l,{data:()=>i});const i={key:"v-f6999108",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AMysql%E7%AE%80%E4%BB%8B.html",title:"第一章：Mysql 介绍",lang:"en-US",frontmatter:{title:"第一章：Mysql 介绍",lang:"en-US"},excerpt:"",headers:[{level:2,title:"什么是数据库",slug:"什么是数据库",children:[]},{level:2,title:"什么是表",slug:"什么是表",children:[]},{level:2,title:"列和数据类型",slug:"列和数据类型",children:[]},{level:2,title:"什么是行",slug:"什么是行",children:[]},{level:2,title:"什么是主键",slug:"什么是主键",children:[]},{level:2,title:"SQL",slug:"sql",children:[]},{level:2,title:"客户机—服务器软件",slug:"客户机—服务器软件",children:[]},{level:2,title:"连接",slug:"连接",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第一章：Mysql简介.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},6103:(e,l,a)=>{a.r(l),a.d(l,{default:()=>s});const i=(0,a(6252).uE)('<h1 id="第一章-mysql-介绍" tabindex="-1"><a class="header-anchor" href="#第一章-mysql-介绍" aria-hidden="true">#</a> 第一章：Mysql 介绍</h1><p>数据的所有存储、检索、管理和处理实际上是由数据库软件——DBMS（数据库管理系统）完成的。MySQL是一种DBMS，即它是一种数据库软件。</p><p>MySQL已经存在很久了，它在世界范围内得到了广泛的安装和使用。为什么有那么多的公司和开发人员使用MySQL？以下列出其原因。</p><ol><li>成本——MySQL是开放源代码的，一般可以免费使用（甚至可以免费修改）。</li><li>性能——MySQL执行很快（非常快）。</li><li>可信赖——某些非常重要和声望很高的公司、站点使用MySQL，这些公司和站点都用MySQL来处理自己的重要数据。</li><li>简单——MySQL很容易安装和使用。</li></ol><h2 id="什么是数据库" tabindex="-1"><a class="header-anchor" href="#什么是数据库" aria-hidden="true">#</a> 什么是数据库</h2><p>数据库这个术语的用法很多，但就本书而言，数据库是一个以某种有组织的方式存储的数据集合。理解数据库的一种最简单的办法是将其想象为一个文件柜。此文件柜是一个存放数据的物理位置，不管数据是什么以及如何组织的。</p><p><strong>数据库（database）</strong> 保存有组织的数据的容器（通常是一个文件或一组文件）。</p><h2 id="什么是表" tabindex="-1"><a class="header-anchor" href="#什么是表" aria-hidden="true">#</a> 什么是表</h2><p>在你将资料放入自己的文件柜时，并不是随便将它们扔进某个抽屉就完事了，而是在文件柜中创建文件，然后将相关的资料放入特定的文件中。</p><p>在数据库领域中，这种文件称为表。表是一种结构化的文件，可用来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其他信息清单。</p><p><strong>表（table）</strong> 某种特定类型数据的结构化清单。</p><p>这里关键的一点在于，存储在表中的数据是一种类型的数据或一个清单。决不应该将顾客的清单与订单的清单存储在同一个数据库表中。这样做将使以后的检索和访问很困难。应该创建两个表，每个清单一个表。</p><p>数据库中的每个表都有一个名字，用来标识自己。此名字是唯一的，这表示数据库中没有其他表具有相同的名字。</p><blockquote><p><strong>表名</strong> 表名的唯一性取决于多个因素，如数据库名和表名等的结合。这表示，虽然在相同数据库中不能两次使用相同的表名，但在不同的数据库中却可以使用相同的表名。</p></blockquote><p>表具有一些特性，这些特性定义了数据在表中如何存储，如可以存储什么样的数据，数据如何分解，各部分信息如何命名，等等。描述表的这组信息就是所谓的模式，模式可以用来描述数据库中特定的表以及整个数据库（和其中表的关系）。</p><p><strong>模式（schema）</strong> 关于数据库和表的布局及特性的信息。</p><h2 id="列和数据类型" tabindex="-1"><a class="header-anchor" href="#列和数据类型" aria-hidden="true">#</a> 列和数据类型</h2><p>表由列组成。列中存储着表中某部分的信息。</p><p><strong>列（column）</strong> 表中的一个字段。所有表都是由一个或多个列组成的。 理解列的最好办法是将数据库表想象为一个网格。网格中每一列存储着一条特定的信息。 数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。</p><p><strong>数据类型（datatype）</strong> 所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据。</p><p>数据类型限制可存储在列中的数据种类（例如:防止在数值字段中录入字符值）。数据类型还帮助正确地排序数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须对数据类型给予特别的关注。</p><h2 id="什么是行" tabindex="-1"><a class="header-anchor" href="#什么是行" aria-hidden="true">#</a> 什么是行</h2><p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。 如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p><p><strong>行（row）</strong> 表中的一个记录。</p><h2 id="什么是主键" tabindex="-1"><a class="header-anchor" href="#什么是主键" aria-hidden="true">#</a> 什么是主键</h2><p>表中每一行都应该有可以唯一标识自己的一列（或一组列）。一个顾客表可以使用顾客编号列，而订单表可以使用订单ID，雇员表可以使用雇员ID或雇员社会保险号。</p><p><strong>主键（primary key）</strong>：一一列（或一组列），其值能够唯一区分表中每个行。</p><p>唯一标识表中每行的这个列（或这组列）称为主键。主键用来表示一个特定的行。没有主键，更新或删除表中特定行很困难，因为没有安全的方法保证只涉及相关的行。</p><p>表中的任何列都可以作为主键，只要它满足以下条件：</p><ol><li>任意两行都不具有相同的主键值；</li><li>每个行都必须具有一个主键值（主键列不允许NULL值）。</li></ol><p><strong>主键值规则</strong>：这里列出的规则是MySQL本身强制实施的。</p><p><strong>主键的最好习惯</strong> 除MySQL强制实施的规则外，应该坚持的几个普遍认可的最好习惯为：</p><ul><li>不更新主键列中的值；</li><li>不重用主键列的值；</li><li>不在主键列中使用可能会更改的值。（例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。）</li></ul><h2 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h2><p>SQL（发音为字母S-Q-L或sequel）是结构化查询语言（Structured Query Language）的缩写。SQL是一种专门用来与数据库通信的语言。</p><p>与其他语言（如，英语以及Java和Visual Basic这样的程序设计语言）不一样，SQL由很少的词构成，这是有意而为的。设计SQL的目的是很好地完成一项任务，即提供一种从数据库中读写数据的简单有效的方法。</p><p>SQL有如下的优点：</p><ul><li>SQL不是某个特定数据库供应商专有的语言。几乎所有重要的DBMS都支持SQL，所以，学习此语言使你几乎能与所有数据库打交道。</li><li>SQL简单易学。它的语句全都是由描述性很强的英语单词组成，而且这些单词的数目不多。</li><li>SQL尽管看上去很简单，但它实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ul><blockquote><p>DBMS专用的SQL SQL不是一种专利语言，而且存在一个标准委员会，他们试图定义可供所有DBMS使用的SQL语法，但事实上任意两个DBMS实现的SQL都不完全相同。本书讲授的SQL是专门针对MySQL的，虽然书中所讲授的多数语法也适用于其他DBMS，但不要认为这些SQL语法是完全可移植的。</p></blockquote><h2 id="客户机—服务器软件" tabindex="-1"><a class="header-anchor" href="#客户机—服务器软件" aria-hidden="true">#</a> 客户机—服务器软件</h2><p>DBMS可分为两类：一类为基于共享文件系统的DBMS，另一类为基于客户机—服务器的DBMS。前者（包括诸如Microsoft Access和FileMaker）用于桌面用途，通常不用于高端或更关键的应用。</p><p>MySQL、Oracle以及Microsoft SQL Server等数据库是基于客户机—服务器的数据库。客户机—服务器应用分为两个不同的部分。服务器部分是负责所有数据访问和处理的一个软件。这个软件运行在称为数据库服务器的计算机上。</p><p>与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。这些请求或更改来自运行客户机软件的计算机。客户机是与用户打交道的软件。例如，如果你请求一个按字母顺序列出的产品表，则客户机软件通过网络提交该请求给服务器软件。服务器软件处理这个请求，根据需要过滤、丢弃和排序数据；然后把结果送回到你的客户机软件。</p><p>所有这些活动对用户都是透明的。数据存储在别的地方，或者数据库服务器为你完成这个处理这一事实是隐藏的。你不需要直接访问数据文件。事实上，多数网络的建立使用户不具有对数据的访问权，甚至不具有对存储数据的驱动器的访问权。</p><p>这样的意义何在？因为为了使用MySQL，你需要访问运行MySQL服务器软件的计算机和发布命令到MySQL的客户机软件的计算机。</p><ul><li>服务器软件为MySQL DBMS。你可以在本地安装的副本上运行，也可以连接到运行在你具有访问权的远程服务器上的一个副本。</li><li>客户机可以是MySQL提供的工具、脚本语言（如Perl）、Web应用开发语言（如ASP、ColdFusion、JSP和PHP）、程序设计语言（如C、C++、Java）等。</li></ul><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h2><p>MySQL与所有客户机—服务器DBMS一样，要求在能执行命令之前登录到DBMS。登录名可以与网络登录名不相同（假定你使用网络）。MySQL在内部保存自己的用户列表，并且把每个用户与各种权限关联起来。</p><p>在最初安装MySQL时，很可能会要求你输入一个管理登录（通常为root）和一个口令。如果你使用的是自己的本地服务器，并且是简单地试验一下MySQL，使用上述登录就可以了。但现实中，管理登录受到密切保护（因为对它的访问授予了创建表、删除整个数据库、更改登录和口令等完全的权限）。</p><blockquote><p>使用MySQL Administrator MySQL Administrator Users视图提供了一个简单的界面，可用来定义新用户，包括赋予口令和访问权限。</p></blockquote><p>为了连接到MySQL，需要以下信息：</p><ul><li>主机名（计算机名）——如果连接到本地MySQL服务器，为localhost；</li><li>端口（如果使用默认端口3306之外的端口）；</li><li>一个合法的用户名；</li><li>用户口令（如果需要）。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>mysql -u -p -h -p\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',53),r={},s=(0,a(3744).Z)(r,[["render",function(e,l){return i}]])},3744:(e,l)=>{l.Z=(e,l)=>{const a=e.__vccOpts||e;for(const[e,i]of l)a[e]=i;return a}}}]);