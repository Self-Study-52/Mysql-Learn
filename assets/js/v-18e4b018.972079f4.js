"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[351],{9959:(s,e,n)=>{n.r(e),n.d(e,{data:()=>r});const r={key:"v-18e4b018",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%AD%90%E6%9F%A5%E8%AF%A2.html",title:"第十三章：子查询",lang:"en-US",frontmatter:{title:"第十三章：子查询",lang:"en-US"},excerpt:"",headers:[{level:2,title:"利用子查询进行过滤",slug:"利用子查询进行过滤",children:[]},{level:2,title:"作为计算字段使用子查询",slug:"作为计算字段使用子查询",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第十三章：子查询.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},5345:(s,e,n)=>{n.r(e),n.d(e,{default:()=>l});const r=(0,n(6252).uE)('<h1 id="第十三章-子查询" tabindex="-1"><a class="header-anchor" href="#第十三章-子查询" aria-hidden="true">#</a> 第十三章：子查询</h1><p><strong>版本要求</strong>: MySQL 4.1引入了对子查询的支持，所以要想使用本章描述的SQL，必须使用MySQL 4.1或更高级的版本。</p><p><strong>查询（query）</strong>: 任何SQL语句都是查询。但此术语一般指SELECT语句。</p><p>SQL还允许创建子查询（subquery），即嵌套在其他查询中的查询。</p><h2 id="利用子查询进行过滤" tabindex="-1"><a class="header-anchor" href="#利用子查询进行过滤" aria-hidden="true">#</a> 利用子查询进行过滤</h2><p>订单存储在两个表中。对于包含订单号、客户ID、订单日期的每个订单，orders表存储一行。各订单的物品存储在相关的orderitems表中。orders表不存储客户信息。它只存储客户的ID。实际的客户信息存储在customers表中。</p><p>假如需要列出订购物品TNT2的所有客户，如何检索呢</p><p>步骤如下：</p><p>(1) 检索包含物品TNT2的所有订单的编号。 (2) 检索具有前一步骤列出的订单编号的所有客户的ID。 (3) 检索前一步骤返回的所有客户ID的客户信息。</p><p>将3个查询语句合成一个。</p><p>第一条SELECT语句的含义很明确，对于prod_id为TNT2的所有订单物品，它检索其order_num列。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT order_num FROM orderitems WHERE prod_id = &#39;TNT2&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229665.png" alt="image-20211020171919188"></p><p>下一步，查询具有订单20005和20007的客户ID。使用 IN 子句</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT cust_id FROM orders WHERE order_num IN (20005,20007);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229666.png" alt="image-20211020171939863"></p><p>现在，把第一个查询（返回订单号的那一个）变为子查询组合两个查询。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT cust_id FROM orders WHERE order_num IN (\n\tSELECT order_num FROM orderitems WHERE prod_id = &quot;TNT2&quot;\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229667.png" alt="image-20211020172358601"></p><p>首先，它执行下面的查询：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT order_num FROM orderitems WHERE prod_id = &#39;TNT2&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>此查询返回两个订单号：20005和20007。 然后，这两个值以IN操作符要求的逗号分隔的格式传递给外部查询的WHERE子句。外部查询变成：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT cust_id FROM orders WHERE order_num IN (20005,20007);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到，输出是正确的并且与前面硬编码WHERE子句所返回的值相同。</p><blockquote><p><strong>格式化SQL</strong>: 包含子查询的SELECT语句难以阅读和调试，特别是它们较为复杂时更是如此。如上所示把子查询分解为多行并且适当地进行缩进，能极大地简化子查询的使用。</p></blockquote><p>现在得到了订购物品TNT2的所有客户的ID。下一步是检索这些客户ID的客户信息。</p><p>分解法：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT order_num FROM orderitems WHERE prod_id =&quot;TNT2&quot;;\nSELECT cust_id FROM orders WHERE order_num IN (20005,20007);\nSELECT cust_name,cust_contact FROM customers WHERE cust_id IN (10001,10004);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>合成后：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT cust_name,cust_contact FROM customers WHERE cust_id IN (\n\tSELECT cust_id FROM orders WHERE order_num IN (\n\t\tSELECT order_num FROM orderitems WHERE prod_id =&quot;TNT2&quot;\t\n\t)\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可见，在WHERE子句中使用子查询能够编写出功能很强并且很灵活的SQL语句。对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性能的限制，不能嵌套太多的子查询。</p><p><strong>列必须匹配</strong> 在WHERE子句中使用子查询（如这里所示），应该保证SELECT语句具有与WHERE子句中相同数目的列。通常，子查询将返回单个列并且与单个列匹配，但如果需要也可以使用多个列。</p><p>虽然子查询一般与IN操作符结合使用，但也可以用于测试等于（=）、不等于（&lt;&gt;）等。</p><p><strong>子查询和性能</strong> 这里给出的代码有效并获得所需的结果。但是，使用子查询并不总是执行这种类型的数据检索的最有效的方法。</p><h2 id="作为计算字段使用子查询" tabindex="-1"><a class="header-anchor" href="#作为计算字段使用子查询" aria-hidden="true">#</a> 作为计算字段使用子查询</h2><p>使用子查询的另一方法是创建计算字段。假如需要显示customers表中每个客户的订单总数。订单与相应的客户ID存储在orders表中。</p><p>为了执行这个操作，遵循下面的步骤。</p><p>(1) 从customers表中检索客户列表。 (2) 对于检索出的每个客户，统计其在orders表中的订单数目。</p><p>Ex： 下面的代码对客户10001的订单进行计数：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT count(*) FROM orders WHERE cust_id = &quot;10001&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229668.png" alt="image-20211020174406243"></p><p>为了对每个客户执行COUNT(*)计算，应该将COUNT(*)作为一个子查询。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>-- 筛选用户名\nSELECT cust_name,cust_contact, (\n\t-- 筛选两表之间相同id的用户购买了多少的商品\t\n\tSELECT count(*) FROM orders WHERE orders.cust_id = customers.cust_id \n) AS orders FROM customers ORDER BY cust_name;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292229669.png" alt="image-20211020174515662"></p><p><strong>相关子查询（correlated subquery）</strong>: 涉及外部查询的子查询。</p><p><strong>逐渐增加子查询来建立查询</strong>: 用子查询测试和调试查询很有技巧性，特别是在这些语句的复杂性不断增加的情况下更是如此。用子查询建立（和测试）查询的最可靠的方法是逐渐进行，这与MySQL处理它们的方法非常相同。首先，建立和测试最内层的查询。然后，用硬编码数据建立和测试外层查询，并且仅在确认它正常后才嵌入子查询。这时，再次测试它。对于要增加的每个查询，重复这些步骤。这样做仅给构造查询增加了一点点时间，但节省了以后（找出查询为什么不正常）的大量时间，并且极大地提高了查询一开始就正常工作的可能性。</p>',46),a={},l=(0,n(3744).Z)(a,[["render",function(s,e){return r}]])},3744:(s,e)=>{e.Z=(s,e)=>{const n=s.__vccOpts||s;for(const[s,r]of e)n[s]=r;return n}}}]);