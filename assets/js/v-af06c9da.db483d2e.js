"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[731],{7595:(e,s,a)=>{a.r(s),a.d(s,{data:()=>l});const l={key:"v-af06c9da",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%87%E6%BB%A4.html",title:"第七章：通配符过滤",lang:"en-US",frontmatter:{title:"第七章：通配符过滤",lang:"en-US"},excerpt:"",headers:[{level:2,title:"百分号（%）通配符",slug:"百分号-通配符",children:[]},{level:2,title:"下划线（_）通配符",slug:"下划线-通配符",children:[]},{level:2,title:"使用技巧",slug:"使用技巧",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第七章：通配符过滤.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},7455:(e,s,a)=>{a.r(s),a.d(s,{default:()=>i});const l=(0,a(6252).uE)('<h1 id="第七章-通配符过滤" tabindex="-1"><a class="header-anchor" href="#第七章-通配符过滤" aria-hidden="true">#</a> 第七章： 通配符过滤</h1><p>以上的所有操作符都是针对已知值进行过滤的。不管是匹配一个还是多个值，测试大于还是小于已知值，或者检查某个范围的值，共同点是过滤中使用的值都是已知的。但是，这种过滤方法并不是任何时候都好用。</p><p>所以可以使用通配符进行过滤搜索，通配符可创建比较特定数据的搜索模式。</p><p><strong>通配符（wildcard）</strong> 用来匹配值的一部分的特殊字符。</p><p><strong>搜索模式（search pattern）</strong> 由字面值、通配符或两者组合构成的搜索条件。</p><blockquote><p>通配符本身实际是SQL的WHERE子句中有特殊含义的字符 为在搜索子句中使用通配符，必须使用LIKE操作符。 LIKE指示MySQL，后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。</p></blockquote><h2 id="百分号-通配符" tabindex="-1"><a class="header-anchor" href="#百分号-通配符" aria-hidden="true">#</a> 百分号（%）通配符</h2><p>最常使用的通配符是百分号（%）。在搜索串中，%表示任何字符出现任意次数。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT xxx FROM xxx WHERE xxx LIKE &quot;xx%&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>匹配以‘xx’开头的字段信息</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227309.png" alt="image-20211015094949679"></p><p>通配符可在搜索模式中任意位置使用，并且可以使用多个通配符。下面的例子使用两个通配符，它们位于模式的两端：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT xxx FROM xxx WHERE xxx LIKE &quot;%xx%&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>表示匹配任何位置包含文本“xx”的值，而不论它之前或之后出现什么字符</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227310.png" alt="image-20211015101545810"></p><p>通配符也可以出现在搜索模式的中间，虽然这样做不太有用：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT xxx FROM xxx WHERE xxx LIKE &quot;x%x&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>表示匹配在x1和x2之间包含任意是数据</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227311.png" alt="image-20211015101920457"></p><blockquote><p>重要的是要注意到，除了一个或多个字符外，%还能匹配0个字符。%代表搜索模式中给定位置的0个、1个或多个字符。 尾空格可能会干扰通配符匹配。 虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。即使是WHERE prod_name LIKE &#39;%&#39;也不能匹配用值NULL作为产品名的行。</p></blockquote><h2 id="下划线-通配符" tabindex="-1"><a class="header-anchor" href="#下划线-通配符" aria-hidden="true">#</a> 下划线（_）通配符</h2><p>下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT xxx FROM xxx WHERE xxx LIKE &quot;x_x&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>注意：（ _ ）只能匹配一个字符，使用技巧和（ % ）一样。</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227312.png" alt="image-20211015102352770"></p><h2 id="使用技巧" tabindex="-1"><a class="header-anchor" href="#使用技巧" aria-hidden="true">#</a> 使用技巧</h2><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul>',27),n={},i=(0,a(3744).Z)(n,[["render",function(e,s){return l}]])},3744:(e,s)=>{s.Z=(e,s)=>{const a=e.__vccOpts||e;for(const[e,l]of s)a[e]=l;return a}}}]);