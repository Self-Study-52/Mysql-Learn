"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[880],{5209:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-51b2ccb5",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AMysql%20%E8%A7%A6%E5%8F%91%E5%99%A8.html",title:"第二十三章：Mysql 触发器",lang:"en-US",frontmatter:{title:"第二十三章：Mysql 触发器",lang:"en-US"},excerpt:"",headers:[{level:2,title:"创建触发器",slug:"创建触发器",children:[]},{level:2,title:"删除触发器",slug:"删除触发器",children:[]},{level:2,title:"使用触发器",slug:"使用触发器",children:[{level:3,title:"INSERT 触发器",slug:"insert-触发器",children:[]},{level:3,title:"DELETE 触发器",slug:"delete-触发器",children:[]},{level:3,title:"INSERT 触发器",slug:"insert-触发器-1",children:[]},{level:3,title:"Update 触发器",slug:"update-触发器",children:[]}]},{level:2,title:"进一步介绍",slug:"进一步介绍",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第二十三章：Mysql 触发器.md",git:{updatedTime:1635899363e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:2}]}}},8106:(s,n,e)=>{e.r(n),e.d(n,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="第二十三章-mysql-触发器" tabindex="-1"><a class="header-anchor" href="#第二十三章-mysql-触发器" aria-hidden="true">#</a> 第二十三章：Mysql 触发器</h1><p>Mysql 的语句在需要时被执行，存储过程亦是如此。但是，如果某些语句在事件发生时自动执行。</p><p>Ex：</p><ul><li>每当一个顾客到了某个数据库表时，都检查其电话号码格式是否正确，州的缩写是否为大写；</li><li>每订购一个产品，从库存数量中自动减去订购数量。</li></ul><p>所有这些例子的共同之处是它们都需要在某个表发生更改时自动处理。这确切地说就是触发器。触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句（或位于BEGIN和END语句之间的一组语句）：</p><ul><li>DELETE</li><li>INSERT</li><li>UPDATE</li></ul><p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th style="text-align:center;">触发器类型</th><th style="text-align:center;">NEW 和 OLD的使用</th></tr></thead><tbody><tr><td style="text-align:center;">INSERT 型触发器</td><td style="text-align:center;">NEW 表示将要或者已经新增的数据</td></tr><tr><td style="text-align:center;">UPDATE 型触发器</td><td style="text-align:center;">OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td style="text-align:center;">DELETE 型触发器</td><td style="text-align:center;">OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h2 id="创建触发器" tabindex="-1"><a class="header-anchor" href="#创建触发器" aria-hidden="true">#</a> 创建触发器</h2><p>注意点：</p><ul><li>唯一的触发器名</li><li>触发器关联的表</li><li>触发器响应的活动（DELETE、INSERT、UPDATE）</li><li>触发器如何执行（处理之前和之后）</li></ul><blockquote><p>保持每个数据库的触发器名唯一，但不是在每个数据库中唯一。这表示同一数据库中的两个表可具有相同名字的触发器。这在其他每个数据库触发器名必须唯一的DBMS中是不允许的，而且以后的MySQL版本很可能会使命名规则更为严格。因此，现在最好是在数据库范围内使用唯一的触发器名。</p></blockquote><p>语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>create trigger trigger_name \n\nbefore/after insert/update/delete\n\non tbl_name \n\n[ for each row ]  -- 行级触发器\n\nbegin\n\n\ttrigger_stmt ;\n\nend;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>仅支持表 只有表才支持触发器，视图不支持（临时表也不支持）。</p></blockquote><p>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器。因此，每个表最多支持6个触发器（每条INSERT、UPDATE和DELETE的之前和之后）。单一触发器不能与多个事件或多个表关联，所以，如果你需要一个对INSERT和UPDATE操作执行的触发器，则应该定义两个触发器。</p><blockquote><p>如果BEFORE触发器失败，则Mysql将不执行请求的操作。此外，如果BEFORE触发器或语句本身失败，MySQL将不执行AFTER触发器（如果有的话）。</p></blockquote><h2 id="删除触发器" tabindex="-1"><a class="header-anchor" href="#删除触发器" aria-hidden="true">#</a> 删除触发器</h2><p>语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>DROP TRIGGER trigger_name;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>触发器是无法更新或覆盖的，修改一个触发器必须先删除它然后重新创建。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>DROP TRIGGER IF EXISTS trigger_name;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="使用触发器" tabindex="-1"><a class="header-anchor" href="#使用触发器" aria-hidden="true">#</a> 使用触发器</h2><h3 id="insert-触发器" tabindex="-1"><a class="header-anchor" href="#insert-触发器" aria-hidden="true">#</a> INSERT 触发器</h3><p>但是在书写：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>CREATE TRIGGER newproduct AFTER INSERT ON products\nFOR EACH ROW SELECT &#39;Product added&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出现报错：<strong>Not allowed to return a result set from a trigger</strong></p><p>那是因为在 Mysql5 之后不允许触发器返回任何结果因此使用into @变量名，将结果赋值到变量中，用select调用即可修改为：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>-- 变量名用@引导\nCREATE TRIGGER newproduct AFTER INSERT ON products\nFOR EACH ROW SELECT &#39;Product added&#39; INTO @asd\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>INSERT 触发器的注意点：</p><ul><li>在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；</li><li>在BEFORE INSERT触发器中，NEW中的值也可以被更新（允许更改被插入的值）；</li><li>对于AUTO_INCREMENT列，NEW在INSERT执行之前包含0，在INSERT执行之后包含新的自动生成值。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>USE `mysql_scirpt`;\nDROP TRIGGER IF EXISTS `prods`;\n\nDELIMITER $$\n-- $$ -- 在MySQL中放开该注释\n\nCREATE TRIGGER `prods`\nAFTER INSERT \nON `mysql_scirpt`.`products`\n\nFOR EACH ROW SELECT &#39;Product Added&#39; INTO @getMessage;\nDELIMITER ;\n\nSELECT @getMessage; -- NULL\n\nINSERT INTO `mysql_scirpt`.`products`(prod_id,vend_id,prod_name,prod_price,prod_desc)\nVALUES (&#39;XCE03&#39;,1001,&#39;3 ton anvil&#39;,20.49,&#39;3 ton anvil, black, complete with handy hook and carrying case&#39;);\n\nSELECT @getMessage; -- Product Added\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>BEFORE或AFTER？ 通常，将BEFORE用于数据验证和净化（目的是保证插入表中的数据确实是需要的数据）。本提示也适用于UPDATE触发器。</p></blockquote><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292225933.png" alt="image-20211029104320270"></p><h3 id="delete-触发器" tabindex="-1"><a class="header-anchor" href="#delete-触发器" aria-hidden="true">#</a> DELETE 触发器</h3><p>DELETE 触发器须知：</p><ul><li>在DELETE触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行；</li><li>OLD中的值全都是只读的，不能更新。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>USE `mysql_scirpt`;\n\nDROP TRIGGER IF EXISTS `prodsDel`;\n\nDELIMITER $$\n-- $$\n\nCREATE TRIGGER `prodsDel`\nAFTER DELETE \nON `mysql_scirpt`.`products`\n\nFOR EACH ROW SELECT &#39;Product Deleted&#39; INTO @getDeleteMessage;\n\nDELIMITER ;\n\nSELECT @getDeleteMessage; -- NULL\n\nDELETE FROM products WHERE prod_id = &#39;XCE04&#39;; \n\t\n\nSELECT @getDeleteMessage; -- Product Deleted\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292225934.png" alt="image-20211029105943307"></p><h3 id="insert-触发器-1" tabindex="-1"><a class="header-anchor" href="#insert-触发器-1" aria-hidden="true">#</a> INSERT 触发器</h3><p>但是在书写：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>CREATE TRIGGER newproduct AFTER INSERT ON products\nFOR EACH ROW SELECT &#39;Product added&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出现报错：<strong>Not allowed to return a result set from a trigger</strong></p><p>那是因为在 Mysql5 之后不允许触发器返回任何结果因此使用into @变量名，将结果赋值到变量中，用select调用即可修改为：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>-- 变量名用@引导\nCREATE TRIGGER newproduct AFTER INSERT ON products\nFOR EACH ROW SELECT &#39;Product added&#39; INTO @asd\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>INSERT 触发器的注意点：</p><ul><li>在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；</li><li>在BEFORE INSERT触发器中，NEW中的值也可以被更新（允许更改被插入的值）；</li><li>对于AUTO_INCREMENT列，NEW在INSERT执行之前包含0，在INSERT执行之后包含新的自动生成值。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>USE `mysql_scirpt`;\nDROP TRIGGER IF EXISTS `prods`;\n\nDELIMITER $$\n-- $$ -- 在MySQL中放开该注释\n\nCREATE TRIGGER `prods`\nAFTER INSERT \nON `mysql_scirpt`.`products`\n\nFOR EACH ROW SELECT &#39;Product Added&#39; INTO @getMessage;\nDELIMITER ;\n\nSELECT @getMessage; -- NULL\n\nINSERT INTO `mysql_scirpt`.`products`(prod_id,vend_id,prod_name,prod_price,prod_desc)\nVALUES (&#39;XCE03&#39;,1001,&#39;3 ton anvil&#39;,20.49,&#39;3 ton anvil, black, complete with handy hook and carrying case&#39;);\n\nSELECT @getMessage; -- Product Added\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>BEFORE或AFTER？ 通常，将BEFORE用于数据验证和净化（目的是保证插入表中的数据确实是需要的数据）。本提示也适用于UPDATE触发器。</p></blockquote><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292225933.png" alt="image-20211029104320270"></p><h3 id="update-触发器" tabindex="-1"><a class="header-anchor" href="#update-触发器" aria-hidden="true">#</a> Update 触发器</h3><p>UPDATE 触发器注意事项：</p><ul><li>在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前（UPDATE语句前）的值，引用一个名为NEW的虚拟表访问新更新的值；</li><li>在BEFORE UPDATE触发器中，NEW中的值可能也被更新（允许更改将要用于UPDATE语句中的值）；</li><li>OLD中的值全都是只读的，不能更新。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>USE `mysql_scirpt`;\n\nDROP TRIGGER IF EXISTS `prodsUpt`;\n\nDELIMITER $$\n-- $$\n\nCREATE TRIGGER `prodsUpt`\nAFTER UPDATE \nON `mysql_scirpt`.`products`\n\nFOR EACH ROW SELECT &#39;Product Updated&#39; INTO @getUpdateMessage;\n\nDELIMITER ;\n\nSELECT @getUpdateMessage; -- NULL\n\nUPDATE products SET vend_id = &#39;1002&#39; WHERE prod_id = &#39;XCE05&#39;; \n\t\nSELECT @getUpdateMessage; -- Product Deleted\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292225935.png" alt="image-20211029110542828"></p><h2 id="进一步介绍" tabindex="-1"><a class="header-anchor" href="#进一步介绍" aria-hidden="true">#</a> 进一步介绍</h2><ul><li>与其他DBMS相比，MySQL 5中支持的触发器相当初级。未来的MySQL版本中有一些改进和增强触发器支持的计划。</li><li>创建触发器可能需要特殊的安全访问权限，但是，触发器的执行是自动的。如果INSERT、UPDATE或DELETE语句能够执行，则相关的触发器也能执行。</li><li>应该用触发器来保证数据的一致性（大小写、格式等）。在触发器中执行这种类型的处理的优点是它总是进行这种处理，而且是透明地进行，与客户机应用无关。</li><li>触发器的一种非常有意义的使用是创建审计跟踪。使用触发器，把更改（如果需要，甚至还有之前和之后的状态）记录到另一个表非常容易。</li><li>遗憾的是，MySQL触发器中不支持CALL语句。这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器内。</li><li>Old和New是Mysql自己封装好的函数，调用old可以获取到数据修改前的内容<code>old.xxx</code>获取，new可以获取到修改后的数据</li></ul>',58),l={},r=(0,e(3744).Z)(l,[["render",function(s,n){return a}]])},3744:(s,n)=>{n.Z=(s,n)=>{const e=s.__vccOpts||s;for(const[s,a]of n)e[s]=a;return e}}}]);