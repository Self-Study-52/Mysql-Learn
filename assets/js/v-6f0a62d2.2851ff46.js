"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[254],{333:(e,t,s)=>{s.r(t),s.d(t,{data:()=>a});const a={key:"v-6f0a62d2",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E5%AD%97%E6%AE%B5.html",title:"第九章：创建计算字段",lang:"en-US",frontmatter:{title:"第九章：创建计算字段",lang:"en-US"},excerpt:"",headers:[{level:2,title:"计算字段",slug:"计算字段",children:[]},{level:2,title:"字段拼接",slug:"字段拼接",children:[]},{level:2,title:"使用别名",slug:"使用别名",children:[]},{level:2,title:"执行算数运算",slug:"执行算数运算",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第九章：创建计算字段.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},5952:(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});const a=(0,s(6252).uE)('<h1 id="第九章-创建计算字段" tabindex="-1"><a class="header-anchor" href="#第九章-创建计算字段" aria-hidden="true">#</a> 第九章：创建计算字段</h1><h2 id="计算字段" tabindex="-1"><a class="header-anchor" href="#计算字段" aria-hidden="true">#</a> 计算字段</h2><p>存储在数据库表中的数据一般不是应用程序所需要的格式。下面举几个例子。</p><ul><li>如果想在一个字段中既显示公司名，又显示公司的地址，但这两个信息一般包含在不同的表列中。</li><li>城市、州和邮政编码存储在不同的列中（应该这样），但邮件标签打印程序却需要把它们作为一个恰当格式的字段检索出来。</li><li>列数据是大小写混合的，但报表程序需要把所有数据按大写表示出来。</li></ul><p>存储在表中的数据都不是应用程序所需要的。我们需要直接从数据库中检索出转换、计算或格式化过的数据；而不是检索出数据，然后再在客户机应用程序或报告程序中重新格式化。</p><p><strong>字段（field）</strong> 基本上与<code>列（column）</code>的意思相同，经常互换使用，不过数据库列一般称为列，而术语字段通常用在计算字段的连接上。</p><p><strong>客户机与服务器的格式:</strong> 可在SQL语句内完成的许多转换和格式化工作都可以直接在客户机应用程序内完成。但一般来说，在数据库服务器上完成这些操作比在客户机中完成要快得多，因为DBMS是设计来快速有效地完成这种处理的。</p><h2 id="字段拼接" tabindex="-1"><a class="header-anchor" href="#字段拼接" aria-hidden="true">#</a> 字段拼接</h2><p><strong>拼接（concatenate）</strong> 将值联结到一起构成单个值。</p><p>MySQL的不同之处： 多数DBMS使用+或||来实现拼接，MySQL则使用Concat()函数来实现。当把SQL语句转换成MySQL语句时一定要把这个区别铭记在心。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select concat(id,&quot;--&quot;,title) from houses; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292226296.png" alt="image-20211018151111127"></p><p><strong>Trim函数</strong>： MySQL除了支持RTrim()（正如刚才所见，它去掉串右边的空格），还支持LTrim()（去掉串左边的空格）以及Trim()（去掉串左右两边的空格）。</p><h2 id="使用别名" tabindex="-1"><a class="header-anchor" href="#使用别名" aria-hidden="true">#</a> 使用别名</h2><p>别名（alias）是一个字段或值的替换名。别名用AS关键字赋予。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select concat(id,&quot;--&quot;,title) as &quot;房价&quot; from houses; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292226297.png" alt="image-20211018151418293"></p><p><strong>别名的其他用途</strong>: 别名还有其他用途。常见的用途包括在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它，等等。</p><h2 id="执行算数运算" tabindex="-1"><a class="header-anchor" href="#执行算数运算" aria-hidden="true">#</a> 执行算数运算</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr></tbody></table><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select price_num*`size` as &quot;房价&quot; from  houses;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292226298.png" alt="image-20211018151902936"> s</p>',22),r={},l=(0,s(3744).Z)(r,[["render",function(e,t){return a}]])},3744:(e,t)=>{t.Z=(e,t)=>{const s=e.__vccOpts||e;for(const[e,a]of t)s[e]=a;return s}}}]);