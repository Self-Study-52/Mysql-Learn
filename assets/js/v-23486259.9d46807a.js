"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[705],{5664:(e,s,t)=>{t.r(s),t.d(s,{data:()=>a});const a={key:"v-23486259",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B1%87%E6%80%BB%E6%95%B0%E6%8D%AE.html",title:"第十一章：汇总数据",lang:"en-US",frontmatter:{title:"第十一章：汇总数据",lang:"en-US"},excerpt:"",headers:[{level:2,title:"AVG() 函数",slug:"avg-函数",children:[]},{level:2,title:"COUNT() 函数",slug:"count-函数",children:[]},{level:2,title:"MAX()函数",slug:"max-函数",children:[]},{level:2,title:"MIN()函数",slug:"min-函数",children:[]},{level:2,title:"SUM() 函数",slug:"sum-函数",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第十一章：汇总数据.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},6468:(e,s,t)=>{t.r(s),t.d(s,{default:()=>n});const a=(0,t(6252).uE)('<h1 id="第十一章-汇总数据" tabindex="-1"><a class="header-anchor" href="#第十一章-汇总数据" aria-hidden="true">#</a> 第十一章：汇总数据</h1><p>汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。使用这些函数，MySQL查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有以下几种。</p><ul><li>确定表中行数（或者满足某个条件或包含某个特定值的行数）。</li><li>获得表中行组的和。</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。</li></ul><p>因此，返回实际表数据是对时间和处理资源的一种浪费（更不用说带宽了）。重复一遍，实际想要的是汇总信息。</p><blockquote><p>所以，Mysql 给我们提供了5个聚集函数</p></blockquote><p><strong>聚集函数（aggregate function）</strong>： 运行在行组上，计算和返回单个值的函数。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><h2 id="avg-函数" tabindex="-1"><a class="header-anchor" href="#avg-函数" aria-hidden="true">#</a> AVG() 函数</h2><p>AVG()通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select avg(price_num*`size`) from houses; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230992.png" alt="image-20211018170103711"></p><p><strong>只用于单个列</strong>： AVG()只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个AVG()函数。</p><p><strong>NULL值</strong>： AVG()函数忽略列值为NULL的行。</p><h2 id="count-函数" tabindex="-1"><a class="header-anchor" href="#count-函数" aria-hidden="true">#</a> COUNT() 函数</h2><p>COUNT()函数进行计数。可利用COUNT()确定表中行的数目或符合特定条件的行的数目。</p><p>COUNT()函数有两种使用方式：</p><ul><li>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li><li>使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。</li></ul><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select count(*) from houses;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230993.png" alt="image-20211018170432542"></p><blockquote><p>利用COUNT(*)对所有行计数，不管行中各列有什么值。</p></blockquote><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select count(entire) from houses where entire = 0;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230994.png" alt="image-20211018170610652"></p><p><strong>NULL值</strong>: 如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号（*），则不忽略。</p><h2 id="max-函数" tabindex="-1"><a class="header-anchor" href="#max-函数" aria-hidden="true">#</a> MAX()函数</h2><p>MAX()返回指定列中的最大值。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select max(`size`) from houses;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230995.png" alt="image-20211018171005093"></p><p><strong>对非数值数据使用MAX()</strong> 虽然MAX()一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。</p><p><strong>NULL值</strong> MAX()函数忽略列值为NULL的行。</p><h2 id="min-函数" tabindex="-1"><a class="header-anchor" href="#min-函数" aria-hidden="true">#</a> MIN()函数</h2><p>MIN()的功能正好与MAX()功能相反，它返回指定列的最小值。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select min(`size`) from houses;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230996.png" alt="image-20211018171148441"></p><p><strong>对非数值数据使用MIN()</strong> MIN()函数与MAX()函数类似，MySQL允许将它用来返回任意列中的最小值，包括返回文本列中的最小值。在用于文本数据时，如果数据按相应的列排序，则MIN()返回最前面的行。</p><p><strong>NULL值</strong> MIN()函数忽略列值为NULL的行。</p><h2 id="sum-函数" tabindex="-1"><a class="header-anchor" href="#sum-函数" aria-hidden="true">#</a> SUM() 函数</h2><p>SUM()用来返回指定列值的和（总计）</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select sum(`size`) from houses; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230997.png" alt="image-20211018171412317"></p><p><strong>在多个列上进行计算</strong>： 如本例所示，利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算</p><p><strong>NULL值</strong> SUM()函数忽略列值为NULL的行</p>',41),l={},n=(0,t(3744).Z)(l,[["render",function(e,s){return a}]])},3744:(e,s)=>{s.Z=(e,s)=>{const t=e.__vccOpts||e;for(const[e,a]of s)t[e]=a;return t}}}]);