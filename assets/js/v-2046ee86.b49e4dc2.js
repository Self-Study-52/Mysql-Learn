"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[926],{8973:(e,t,l)=>{l.r(t),l.d(t,{data:()=>n});const n={key:"v-2046ee86",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86.html",title:"第二十六章：安全管理",lang:"en-US",frontmatter:{title:"第二十六章：安全管理",lang:"en-US"},excerpt:"",headers:[{level:2,title:"访问控制",slug:"访问控制",children:[]},{level:2,title:"管理用户",slug:"管理用户",children:[]},{level:2,title:"创建用户账号",slug:"创建用户账号",children:[]},{level:2,title:"删除用户账号",slug:"删除用户账号",children:[]},{level:2,title:"设置访问权限",slug:"设置访问权限",children:[]},{level:2,title:"更改口令",slug:"更改口令",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第二十六章：安全管理.md",git:{updatedTime:1635857837e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:2}]}}},952:(e,t,l)=>{l.r(t),l.d(t,{default:()=>r});const n=(0,l(6252).uE)('<h1 id="第二十六章-安全管理" tabindex="-1"><a class="header-anchor" href="#第二十六章-安全管理" aria-hidden="true">#</a> 第二十六章：安全管理</h1><p>数据库中通常是包含很多关键数据，确保这些数据安全和完整需要利用访问控制。</p><h2 id="访问控制" tabindex="-1"><a class="header-anchor" href="#访问控制" aria-hidden="true">#</a> 访问控制</h2><p>Mysql服务器的安全基础是：<code>用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。</code> -- 用户不能对过多的数据具有过多的访问权.</p><p>如以下例子：</p><ul><li>多数用户只需对表进行读和写，但少数用户甚至需要能创建和删除表；</li><li>某些用户需要读表，但不能更新表；</li><li>你可能先允许用户添加数据，但不允许它们删除数据；</li><li>某些用户（管理员）可能需要处理用户账号的权限，但多数用户不需要。</li><li>你可能想让用户通过存储过程访问数据，但不允许他们直接访问数据。</li><li>根据用户登陆的地点限制对某些功能的访问</li></ul><p>这些都只是例子，但有助于说明一个重要的事实，即你需要给用户提供他们所需的访问权，且仅提供他们所需的访问权。这就是所谓的访问控制，管理访问控制需要创建和管理用户账号。</p><blockquote><p><strong>不要使用root</strong>：应该严肃对待root登录的使用。仅在绝对需要时使用它（或许在你不能登录其他管理账号时使用）。不应该在日常的MySQL操作中使用root。</p></blockquote><h2 id="管理用户" tabindex="-1"><a class="header-anchor" href="#管理用户" aria-hidden="true">#</a> 管理用户</h2><p>MySQL用户账号和信息存储。一般不需要直接访问数据库和表（你稍后会明白这一点），但有时需要直接访问。需要直接访问它的时机之一是在需要获得所有用户账号列表时。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT `username` FROM `User`; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202111011532980.png" alt="image-20211101153211945"></p><blockquote><p><strong>开启多个客户机实现：</strong> 实验对用户账号和全新先进行更改的对好办法就是开启多个数据库客户机，一个作为管理登录，其他作为被测试是的用户登录。</p></blockquote><h2 id="创建用户账号" tabindex="-1"><a class="header-anchor" href="#创建用户账号" aria-hidden="true">#</a> 创建用户账号</h2><p>语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>CREATE USER user_name IDENTIFIED BY &#39;password&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果你列出用户账号，将会看到输出中看到新账号。</p><blockquote><p><strong>指定散列口令：</strong> INDENTIFIED BY 中鼎的口令为纯文本，MySQL将在保存到user表之前对其进行加密。为了作为散列值指定口令，使用IDENTIFIED BY PASSWORD。</p></blockquote><p>GRANT语句也可以创建用户账号，但一般来说CREATE USER是最清楚和最简单的句子。此外，也可以通过直接插入行到user表来增加用户，不过为安全起见，一般不建议这样做。MySQL用来存储用户账号信息的表（以及表模式等）极为重要，对它们的任何毁坏都可能严重地伤害到MySQL服务器。因此，相对于直接处理来说，最好是用标记和函数来处理这些表。</p><p>重命名语法：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>RENAME USER user_name TO new_user_name;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>仅MySQL 5或之后的版本支持RENAME USER。为了在以前的MySQL中重命名一个用户，可使用UPDATE直接更新user表。</p><h2 id="删除用户账号" tabindex="-1"><a class="header-anchor" href="#删除用户账号" aria-hidden="true">#</a> 删除用户账号</h2><p>语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>DROP USER username;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="设置访问权限" tabindex="-1"><a class="header-anchor" href="#设置访问权限" aria-hidden="true">#</a> 设置访问权限</h2><p>在创建用户账号后，必须接着分配访问权限。新创建的用户账号没有访问权限。它们能登录MySQL，但不能看到数据，不能执行任何数据库操作。</p><p>语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SHOW GRANTS FOR username;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>输出结果显示用户ben有一个权限USAGE ON <em>.</em>。USAGE表 示根本没权限（我知道，这不很直观），所以，此结果表示在任意数据库和任意表上对任何东西没有权限。</p><p>为设置权限，使用 CRANT 语句。所需信息：</p><ul><li>要授予的权限；</li><li>要授予访问权限的数据库或表；</li><li>用户名。</li></ul><p>用法：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>GRANT SELECT ON 数据库名/数据库表.* TO username;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>撤销权限语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>REVOKE SELECT ON 数据库名/数据库表.* TO username;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>用于取消刚赋予用户的访问权限，且被撤销的权限必须存在。</p><p>GRANT和REVOKE可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用GRANT ALL和REVOKE ALL；</li><li>整个数据库，使用ON database.*；</li><li>特定的表，使用ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><p align="center">权限表</p><table><thead><tr><th style="text-align:center;">权限</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">ALL</td><td style="text-align:center;">除GRANT OPTION外的所有权限</td></tr><tr><td style="text-align:center;">ALTER</td><td style="text-align:center;">使用ALTER TABLE</td></tr><tr><td style="text-align:center;">ALTER ROUTINE</td><td style="text-align:center;">使用ALTER PROCEDURE和DROP PROCEDURE</td></tr><tr><td style="text-align:center;">CREATE</td><td style="text-align:center;">使用CREATE TABLE</td></tr><tr><td style="text-align:center;">CREATE ROUTINE</td><td style="text-align:center;">使用CREATE PROCEDURE</td></tr><tr><td style="text-align:center;">CREATE TEMPORARY TABLES</td><td style="text-align:center;">使用CREATE TEMPORARY TABLE</td></tr><tr><td style="text-align:center;">CREATE USER</td><td style="text-align:center;">使用CREATE USER、DROP USER、RENAME USER和REVOKEALL PRIVILEGES</td></tr><tr><td style="text-align:center;">CREATE VIEW</td><td style="text-align:center;">使用CREATE VIEW</td></tr><tr><td style="text-align:center;">DELETE</td><td style="text-align:center;">使用DELETE</td></tr><tr><td style="text-align:center;">DROP</td><td style="text-align:center;">使用DROP TABLE</td></tr><tr><td style="text-align:center;">EXECUTE</td><td style="text-align:center;">使用CALL和存储过程</td></tr><tr><td style="text-align:center;">FILE</td><td style="text-align:center;">使用SELECT INTO OUTFILE和LOAD DATA INFILE</td></tr><tr><td style="text-align:center;">GRANT OPTION</td><td style="text-align:center;">使用GRANT和REVOKE</td></tr><tr><td style="text-align:center;">INDEX</td><td style="text-align:center;">使用CREATE INDEX和DROP INDEX</td></tr><tr><td style="text-align:center;">INSERT</td><td style="text-align:center;">使用INSERT</td></tr><tr><td style="text-align:center;">LOCK TABLES</td><td style="text-align:center;">使用LOCK TABLES</td></tr><tr><td style="text-align:center;">PROCESS</td><td style="text-align:center;">使用SHOW FULL PROCESSLIST</td></tr><tr><td style="text-align:center;">RELOAD</td><td style="text-align:center;">使用FLUSH</td></tr><tr><td style="text-align:center;">REPLICATION CLIENT</td><td style="text-align:center;">服务器位置的访问</td></tr><tr><td style="text-align:center;">REPLICATION SLAVE</td><td style="text-align:center;">由复制从属使用</td></tr><tr><td style="text-align:center;">SELECT</td><td style="text-align:center;">使用SELECT</td></tr><tr><td style="text-align:center;">SHOW DATABASES</td><td style="text-align:center;">使用SHOW DATABASES</td></tr><tr><td style="text-align:center;">SHOW VIEW</td><td style="text-align:center;">使用SHOW CREATE VIEW</td></tr><tr><td style="text-align:center;">SHUTDOWN</td><td style="text-align:center;">使用mysqladmin shutdown（用来关闭MySQL）</td></tr><tr><td style="text-align:center;">SUPER</td><td style="text-align:center;">使用CHANGE MASTER、KILL、LOGS、PURGE、MASTER和SET GLOBAL。还允许mysqladmin调试登录</td></tr><tr><td style="text-align:center;">UPDATE</td><td style="text-align:center;">使用UPDATE</td></tr><tr><td style="text-align:center;">USAGE</td><td style="text-align:center;">无访问权限</td></tr></tbody></table><p>在使用GRANT和REVOKE时，用户账号必须存在，但对所涉及的对象没有这个要求。这允许管理员在创建数据库和表之前设计和实现安全措施。</p><p>这样做的副作用是，当某个数据库或表被删除时（用DROP语句），相关的访问权限仍然存在。而且，如果将来重新创建该数据库或表，这些权限仍然起作用。</p><h2 id="更改口令" tabindex="-1"><a class="header-anchor" href="#更改口令" aria-hidden="true">#</a> 更改口令</h2><p>语法格式：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SET PASSWORD FOR username = Password(&#39;XXXX&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Password()函数进行加密。</p><p>还可以设置口令：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SET PASSWORD = Password(&#39;xxxxx&#39;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在不指定用户名时，SET PASSWORD更新当前登录用户的口令。</p>',50),s={},r=(0,l(3744).Z)(s,[["render",function(e,t){return n}]])},3744:(e,t)=>{t.Z=(e,t)=>{const l=e.__vccOpts||e;for(const[e,n]of t)l[e]=n;return l}}}]);