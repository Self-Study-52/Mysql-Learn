"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[945],{2075:(e,t,a)=>{a.r(t),a.d(t,{data:()=>s});const s={key:"v-1ba7c008",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%BF%87%E6%BB%A4%E8%AF%AD%E5%8F%A5%20WHERE.html",title:"第五章：过滤数据 WHERE",lang:"en-US",frontmatter:{title:"第五章：过滤数据 WHERE",lang:"en-US"},excerpt:"",headers:[{level:2,title:"检查单个值",slug:"检查单个值",children:[]},{level:2,title:"不匹配检查",slug:"不匹配检查",children:[]},{level:2,title:"范围检查",slug:"范围检查",children:[]},{level:2,title:"空值检测",slug:"空值检测",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第五章：过滤语句 WHERE.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},3691:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});const s=(0,a(6252).uE)('<h1 id="第四章-过滤数据-where" tabindex="-1"><a class="header-anchor" href="#第四章-过滤数据-where" aria-hidden="true">#</a> 第四章： 过滤数据 WHERE</h1><p>数据库表一般包含大量的数据，很少需要检索表中所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。</p><blockquote><p><strong>数据根据WHERE子句中指定的搜索条件进行过滤。WHERE子句在表名（FROM子句）之后给出</strong></p></blockquote><p>数据也可以在应用层过滤。为此目的，SQL的SELECT语句为了客户机应用检索出超过实际所需数据，然后客户机代码对返回数据进行循环，以提取出需要 的行。</p><p>通常，这种实现并不令人满意。因此，对数据库进行了优化，以便快速有效地对数据进行过滤。让客户机应用（或开发语言）处理数据库的工作将会极大地影响应用的性能，并且使所创建的应用完全不具备可伸缩性。此外，如果在客户机上过滤数据，服务器不得不通过网络发送多余的数据，这将导致网络带宽的浪费。</p><p><strong>在同时使用<code>ORDER BY</code>和<code>WHERE</code>子句时，应该让<code>ORDER BY</code>位于<code>WHERE</code>之后，否则将会产生错误</strong></p><table><thead><tr><th>WHERE 子句操作符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>BETWEEN ... AND ...</td><td>在指定的两个值之间</td></tr></tbody></table><h2 id="检查单个值" tabindex="-1"><a class="header-anchor" href="#检查单个值" aria-hidden="true">#</a> 检查单个值</h2><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名 操作符 值\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230486.png" alt="image-20211014211522217"></p><h2 id="不匹配检查" tabindex="-1"><a class="header-anchor" href="#不匹配检查" aria-hidden="true">#</a> 不匹配检查</h2><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名 &lt;&gt; 值\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230487.png" alt="image-20211014211937641"></p><blockquote><p>所查到的数据中没有了 id 为 330 的数据</p></blockquote><p>如果仔细观察上述WHERE子句中使用的条件，会看到有的值括在单引号内（如前面使用的&#39;fuses&#39;），而有的值未括起来。单引号用来限定字符串。如果将值与串类型的列进行比较，则需要限定引号。用来与数值列进行比较的值不用引号。</p><h2 id="范围检查" tabindex="-1"><a class="header-anchor" href="#范围检查" aria-hidden="true">#</a> 范围检查</h2><p>查询值在某个范围内部</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名 BETWEEN 值 AND 值;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230488.png" alt="image-20211014212311865"></p><p>在使用BETWEEN时，必须指定两个值——所需范围的低端值和高端值。这两个值必须用AND关键字分隔。BETWEEN匹配范围中所有的值，包括指定的开始值和结束值。</p><h2 id="空值检测" tabindex="-1"><a class="header-anchor" href="#空值检测" aria-hidden="true">#</a> 空值检测</h2><p>检查对应的值是否为空</p><blockquote><p>NULL 无值（no value），它与字段包含0、空字符串或仅仅包含空格不同。</p></blockquote><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名 IS NULL;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292230489.png" alt="image-20211014212938364"></p><p>在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。</p><p>因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。</p>',27),d={},r=(0,a(3744).Z)(d,[["render",function(e,t){return s}]])},3744:(e,t)=>{t.Z=(e,t)=>{const a=e.__vccOpts||e;for(const[e,s]of t)a[e]=s;return a}}}]);