"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[454],{2411:(e,s,a)=>{a.r(s),a.d(s,{data:()=>l});const l={key:"v-78c21360",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4.html",title:"第六章：数据过滤",lang:"en-US",frontmatter:{title:"第六章：数据过滤",lang:"en-US"},excerpt:"",headers:[{level:2,title:"AND 操作符",slug:"and-操作符",children:[]},{level:2,title:"OR 操作符",slug:"or-操作符",children:[]},{level:2,title:"计算顺序",slug:"计算顺序",children:[]},{level:2,title:"IN 操作符",slug:"in-操作符",children:[]},{level:2,title:"NOT 操作符",slug:"not-操作符",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第六章：数据过滤.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},7566:(e,s,a)=>{a.r(s),a.d(s,{default:()=>r});const l=(0,a(6252).uE)('<h1 id="第六章-数据过滤" tabindex="-1"><a class="header-anchor" href="#第六章-数据过滤" aria-hidden="true">#</a> 第六章：数据过滤</h1><p>之前所有WHERE子句在过滤数据时使用的都是单一的条件。为了进行更强的过滤控制，MySQL允许给出多个WHERE子句。这些子句可以两种方式使用：以AND子句的方式或OR子句的方式使用。</p><p><strong>操作符（operator）</strong> 用来联结或改变WHERE子句中的子句的关键字。也称为<strong>逻辑操作符（logical operator）</strong>。</p><h2 id="and-操作符" tabindex="-1"><a class="header-anchor" href="#and-操作符" aria-hidden="true">#</a> AND 操作符</h2><p>使用 <code>AND</code> 操作符，查询出来的数据必须符合两个判断条件的要求才会显示。</p><p>还可以添加多个过滤条件，每添加一条就要使用一个AND。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名1 操作符 值1 AND 列名2 操作符 值2;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227277.png" alt="image-20211015090942739"></p><h2 id="or-操作符" tabindex="-1"><a class="header-anchor" href="#or-操作符" aria-hidden="true">#</a> OR 操作符</h2><p>检索匹配任一条件的行。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名1 操作符 值1 OR 列名2 操作符 值2;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227278.png" alt="image-20211015091413096"></p><p>只要由符合这两个过滤条件的数据都会进行展会。</p><h2 id="计算顺序" tabindex="-1"><a class="header-anchor" href="#计算顺序" aria-hidden="true">#</a> 计算顺序</h2><p>WHERE可包含任意数目的AND和OR操作符。允许两者结合以进行复杂和高级的过滤。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select * from houses where id = 330 or price_num = 3600 and entire = 1;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>SQL（像多数语言一样）在处理OR操作符前，优先处理AND操作符。</p></blockquote><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227279.png" alt="image-20211015091806416"></p><p>解决方法：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select * from houses where (id = 330 or price_num = 3600) and entire = 1;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227280.png" alt="image-20211015091950457"></p><p>这条SELECT语句与前一条的唯一差别是，这条语句中，前两个条件用圆括号括了起来。因为圆括号具有较AND或OR操作符高的计算次序，DBMS首先过滤圆括号内的OR条件。</p><blockquote><p>任何时候使用具有AND和OR操作符的WHERE子句，都应该使用圆括号明确地分组操作符。不要过分依赖默认计算次序，即使它确实是你想要的东西也是如此。使用圆括号没有什么坏处，它能消除歧义。</p></blockquote><h2 id="in-操作符" tabindex="-1"><a class="header-anchor" href="#in-操作符" aria-hidden="true">#</a> IN 操作符</h2><p>IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清单，全都括在圆括号中。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名 操作符 值 IN 列名 (xxx);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227281.png" alt="image-20211015092502993"></p><p><strong>优点：</strong></p><ul><li>在使用长的合法选项清单时，IN操作符的语法更清楚且更直观。</li><li>在使用IN时，计算的次序更容易管理（因为使用的操作符更少）</li><li>IN操作符一般比OR操作符清单执行更快。</li><li>IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句。</li></ul><p><strong>功能与OR相当</strong></p><h2 id="not-操作符" tabindex="-1"><a class="header-anchor" href="#not-操作符" aria-hidden="true">#</a> NOT 操作符</h2><p>否定它之后所跟的任何条件。</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>SELECT XXX FROM XXX WHERE 列名 操作符 值 NOT IN 列名 (xxx);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292227282.png" alt="image-20211015093030997"></p><p>对于简单的WHERE子句，使用NOT确实没有什么优势。但在更复杂的子句中，NOT是非常有用的。例如，在与IN操作符联合使用时，NOT使找出与条件列表不匹配的行非常简单。</p>',35),n={},r=(0,a(3744).Z)(n,[["render",function(e,s){return l}]])},3744:(e,s)=>{s.Z=(e,s)=>{const a=e.__vccOpts||e;for(const[e,l]of s)a[e]=l;return a}}}]);