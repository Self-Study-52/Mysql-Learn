"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[356],{852:(t,e,l)=>{l.r(e),l.d(e,{data:()=>n});const n={key:"v-5683b4c8",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E9%99%84%E5%BD%95B%EF%BC%9AMysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",title:"附录B：Mysql数据类型",lang:"enn-US",frontmatter:{title:"附录B：Mysql数据类型",lang:"enn-US"},excerpt:"",headers:[{level:2,title:"串数据类型",slug:"串数据类型",children:[]},{level:2,title:"数值数据类型",slug:"数值数据类型",children:[]},{level:2,title:"日期和时间数据类型",slug:"日期和时间数据类型",children:[]},{level:2,title:"二进制数据类型",slug:"二进制数据类型",children:[]}],filePathRelative:"guide/《Mysql必知必会》/附录B：Mysql数据类型.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},4075:(t,e,l)=>{l.r(e),l.d(e,{default:()=>r});const n=(0,l(6252).uE)('<h1 id="附录b-mysql数据类型" tabindex="-1"><a class="header-anchor" href="#附录b-mysql数据类型" aria-hidden="true">#</a> 附录B：Mysql数据类型</h1><p>数据类型是定义列中可以存储什么数据以及该数据实际的存储规则。</p><p>目的：</p><ul><li>数据类型允许限制可存储在列中的数据。</li><li>允许在内部更有效的存储数据。可以用一种比文本串更简洁的格式存储数值和日期时间值。</li><li>数据类型允许变换排序顺序。如果所有数据都作为串处理，则1位于10之前，而10又位于2之前（串以字典顺序排序，从左边开始比较，一次一个字符）。作为数值数据类型，数值才能正确排序。</li></ul><blockquote><p><strong>在设计表使应更重视数据类型。</strong></p></blockquote><h2 id="串数据类型" tabindex="-1"><a class="header-anchor" href="#串数据类型" aria-hidden="true">#</a> 串数据类型</h2><p>最常用的数据类型是串数据类型。它们存储串，如名字、地址、电话号码、邮政编码等。有两种基本的串类型，分别为定长串和变长串。</p><p>定长串接收长度固定的字符串，其长度实在创建表时指定的。</p><p>例如：名字列可允许30个字符，而社会安全号列允许11个字符（允许的字符数目中包括两个破折号）。</p><p>定长列不允许许多于指定的字符数目。它们分配的存储空间与指定的一样多。因此，如果串Ben存储到30个字符的名字字段，则存储的是30个字符，CHAR属于定长串类型。</p><p>变长串存储可变长度的文本。有些变长数据类型具有最大的定长，而有些则是完全变长的。不管是哪种，只有指定的数据得到保存（额外的数据不保存）TEXT属于变长串类型。</p><p>既然变长数据类型这样灵活，为什么还要使用定长数据类型？回答是因为性能。MySQL处理定长列远比处理变长列快得多。此外，MySQL不允许对变长列（或一个列的可变部分）进行索引。这也会极大地影响性能。</p><p align="center" style="font-weight:bolder;">串数据类型</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">CHAR</td><td style="text-align:center;">1~255个字符的定长串。长度必须在创建时指定，否则Mysql假定为CHAR（1）</td></tr><tr><td style="text-align:center;">ENUM</td><td style="text-align:center;">接收最多64K个串组成的一个预定义集合的某个串</td></tr><tr><td style="text-align:center;">LONGTEXT</td><td style="text-align:center;">与 <code>TEXT</code> 相同，最大长度为 4GB</td></tr><tr><td style="text-align:center;">MEDIUMTEXT</td><td style="text-align:center;">与 <code>TEXT</code> 相同，最大长度为 16KB</td></tr><tr><td style="text-align:center;">SET</td><td style="text-align:center;">接收最多64个串组成的一个预定义集合的里零个或多个串</td></tr><tr><td style="text-align:center;">TEXT</td><td style="text-align:center;">最大长度为 64K 的变长文本</td></tr><tr><td style="text-align:center;">TINYTEXT</td><td style="text-align:center;">与 <code>TEXT</code> 相同，但最大长度为 355 字节</td></tr><tr><td style="text-align:center;">VARCHAR</td><td style="text-align:center;">长度可变，最多不超过255字节。如果在创建时指定为 <code>VARCHAR(n)</code>,则可存储0到n个字符的变长串（n&lt;=255）</td></tr></tbody></table><blockquote><p>不管使用何种形式的串数据类型，串值都必须阔在引号内。（单引号会更好）</p></blockquote><blockquote><p>你可能会认为电话号码和邮政编码应该存储在数值字段中（数值字段只存储数值数据），但是，这样做却是不可取的。如果在数值字段中存储邮政编码01234，则保存的将是数值1234，实际上丢失了一位数字。需要遵守的基本规则是：如果数值是计算（求和、平均等）中使用的数值，则应该存储在数值数据类型列中。如果作为字符串（可能只包含数字）使用，则应该保存在串数据类型列中。</p></blockquote><h2 id="数值数据类型" tabindex="-1"><a class="header-anchor" href="#数值数据类型" aria-hidden="true">#</a> 数值数据类型</h2><p>数值数据类型存储数值。MySQL支持多种数值数据类型，每种存储的数值具有不同的取值范围。显然，支持的取值范围越大，所需存储空间越多。此外，有的数值数据类型支持使用十进制小数点（和小数），而有的则只支持整数。</p><blockquote><p>所有数值数据类型（除<code>BIT</code>和<code>BOOLEAN</code>外）都可以有符号或无符号。有符号数值列可以存储正或负的数值，无符号数值列只能存储正数。默认情况为有符号，但如果你知道自己不需要存储负值，可以使用UNSIGNED关键字，这样做将允许你存储两倍大小的值。</p></blockquote><p align="center" style="font-weight:bolder;">数值数据类型</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">BIT</td><td style="text-align:center;">位字段，1~64位。</td></tr><tr><td style="text-align:center;">BIGINT</td><td style="text-align:center;">整数型，支持 -9223372036854775808～9223372036854775807（如果是UNSIGNED，为0～18446744073709551615）的数</td></tr><tr><td style="text-align:center;">BOOLEAN/BOOL</td><td style="text-align:center;">布尔标志，或者为0或1，主要用于开/关（on/off）标志</td></tr><tr><td style="text-align:center;">DECIMAL/DEC</td><td style="text-align:center;">精度可变的浮点值</td></tr><tr><td style="text-align:center;">DOUBLE</td><td style="text-align:center;">双精度浮点值</td></tr><tr><td style="text-align:center;">FLOAT</td><td style="text-align:center;">单精度浮点值</td></tr><tr><td style="text-align:center;">INT/INTEGER</td><td style="text-align:center;">整数值支持 -2147483648～2147483647（如果是 UNSIGNED， 为0～4294967295）的数</td></tr><tr><td style="text-align:center;">MEDIUMINT</td><td style="text-align:center;">整数值，支持 -8388608～8388607（如果是UNSIGNED，为0～16777215）的数</td></tr><tr><td style="text-align:center;">REAL</td><td style="text-align:center;">4字节的浮点值</td></tr><tr><td style="text-align:center;">SMALLINT</td><td style="text-align:center;">整数值，支持 -32768～32767（如果是UNSIGNED，为0～65535）的数</td></tr><tr><td style="text-align:center;">TINYINT</td><td style="text-align:center;">整数值，支持 -128～127（如果为UNSIGNED，为0～255）的数</td></tr></tbody></table><blockquote><p>与串不一样，数值不应该括在引号内。 Mysql 中没有串门存储货币的数据类型，一般情况下使用 DECIMAL(8,2) |</p></blockquote><h2 id="日期和时间数据类型" tabindex="-1"><a class="header-anchor" href="#日期和时间数据类型" aria-hidden="true">#</a> 日期和时间数据类型</h2><p>MySQL使用专门的数据类型来存储日期和时间值。</p><p align="center" style="font-weight:bolder;">日期和时间数据类型</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">DATE</td><td style="text-align:center;">表示 1000-01-01~9999-12-31 的日期，格式为：<code>YYYY-MM-DD</code></td></tr><tr><td style="text-align:center;">DATETIME</td><td style="text-align:center;">DATE 和 TIME 的组合</td></tr><tr><td style="text-align:center;">TIMESTAMP</td><td style="text-align:center;">功能和 DATETIEM 相同（范围较小）</td></tr><tr><td style="text-align:center;">TIME</td><td style="text-align:center;">格式为：HH:MM:SS</td></tr><tr><td style="text-align:center;">YEAR</td><td style="text-align:center;">用2位数字表示。范围是 70（1970）~69（2069）年，用四位数表示，范围是1901年～2155年。</td></tr></tbody></table><h2 id="二进制数据类型" tabindex="-1"><a class="header-anchor" href="#二进制数据类型" aria-hidden="true">#</a> 二进制数据类型</h2><p>二进制可以存储任何数据（甚至包括二进制信息），Ex：图像、媒体、字处理文档。</p><p align="center" style="font-weight:bolder;">二进制数据类型</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">BLOB</td><td style="text-align:center;">Blob最大长度为 64KB</td></tr><tr><td style="text-align:center;">MEDIUMBLOB</td><td style="text-align:center;">Blob最大长度为 16MB</td></tr><tr><td style="text-align:center;">LONGBLOB</td><td style="text-align:center;">Blob最大长度为 4GB</td></tr><tr><td style="text-align:center;">TINYBLOB</td><td style="text-align:center;">Blob最大长度为 255字节</td></tr></tbody></table>',30),d={},r=(0,l(3744).Z)(d,[["render",function(t,e){return n}]])},3744:(t,e)=>{e.Z=(t,e)=>{const l=t.__vccOpts||t;for(const[t,n]of e)l[t]=n;return l}}}]);