"use strict";(self.webpackChunkMysql_Learn=self.webpackChunkMysql_Learn||[]).push([[299],{6741:(e,t,d)=>{d.r(t),d.d(t,{data:()=>s});const s={key:"v-2ee744ae",path:"/guide/%E3%80%8AMysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%90%9C%E7%B4%A2.html",title:"第八章：正则表达式搜索",lang:"en-US",frontmatter:{title:"第八章：正则表达式搜索",lang:"en-US"},excerpt:"",headers:[{level:2,title:"基本字符匹配",slug:"基本字符匹配",children:[]},{level:2,title:"OR 匹配",slug:"or-匹配",children:[]},{level:2,title:"匹配几个字符之一",slug:"匹配几个字符之一",children:[]},{level:2,title:"匹配范围",slug:"匹配范围",children:[]},{level:2,title:"匹配特殊字符",slug:"匹配特殊字符",children:[]},{level:2,title:"匹配字符类",slug:"匹配字符类",children:[]},{level:2,title:"匹配多个实例",slug:"匹配多个实例",children:[]},{level:2,title:"定位符",slug:"定位符",children:[]}],filePathRelative:"guide/《Mysql必知必会》/第八章：正则表达式搜索.md",git:{updatedTime:1635847604e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]}}},3076:(e,t,d)=>{d.r(t),d.d(t,{default:()=>a});const s=(0,d(6252).uE)('<h1 id="第七章-正则表达式搜索" tabindex="-1"><a class="header-anchor" href="#第七章-正则表达式搜索" aria-hidden="true">#</a> 第七章： 正则表达式搜索</h1><p>过滤例子允许用匹配、比较和通配操作符寻找数据。对于基本的过滤（或者甚至是某些不那么基本的过滤），这样就足够了。但随着过滤条件的复杂性的增加，WHERE子句本身的复杂性也有必要增加。</p><p>这也就是正则表达式变得有用的地方。正则表达式是用来匹配文本的特殊的串（字符集合）。</p><p>所有种类的程序设计语言、文本编辑器、操作系统等都支持正则表达式。</p><p><strong>使用正则匹配的关键词为：REGEXP</strong></p><h2 id="基本字符匹配" tabindex="-1"><a class="header-anchor" href="#基本字符匹配" aria-hidden="true">#</a> 基本字符匹配</h2><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where id regexp 330;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>类似于 LIKE 匹配。找出了所有包含了 330 的 id。</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224909.png" alt="image-20211015103317505"></p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where  id regexp .0;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用了正则表达式.0。.是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224910.png" alt="image-20211015103842283"></p><p>LIKE匹配整个列。如果被匹配的文本在列值中出现，LIKE将不会找到它，相应的行也不被返回（除非使用通配符）。而REGEXP在列值内进行匹配，如果被匹配的文本在列值中出现，REGEXP将会找到它，相应的行将被返回。这是一个非常重要的差别。</p><h2 id="or-匹配" tabindex="-1"><a class="header-anchor" href="#or-匹配" aria-hidden="true">#</a> OR 匹配</h2><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where  id regexp &#39;1000|2000&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>匹配了 id 中包含了 1000或2000 的数据，| 为正则表达式的OR操作符。它表示匹配其中之一。</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224911.png" alt="image-20211015104434539"></p><h2 id="匹配几个字符之一" tabindex="-1"><a class="header-anchor" href="#匹配几个字符之一" aria-hidden="true">#</a> 匹配几个字符之一</h2><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where  id regexp &#39;[123]000&#39;;\n-- 或\nselect id,title,community from houses where  id regexp &#39;[1|2|3]000&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224912.png" alt="image-20211015104925117"></p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224913.png" alt="image-20211015105054511"></p><p>匹配特定的字符：通过指定一组用[和]括起来的字符来完成</p><p>[]是另一种形式的OR语句。事实上，正则表达式 <code>[123]000</code> 为 <code>[1|2|3]000</code> 的缩写，也可以使用后者。</p><h2 id="匹配范围" tabindex="-1"><a class="header-anchor" href="#匹配范围" aria-hidden="true">#</a> 匹配范围</h2><p><strong>使用-来定义一个范围</strong></p><p>[0-9] 匹配的范围在 0 到 9 之间的所有数字 [a-z] 匹配的范围在 a 到 z 之间的所有字符 [A-Z] 匹配的范围在 A 到 Z 之间的所有字符</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where id regexp &#39;[1-5]0000&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224914.png" alt="image-20211015105829994"></p><h2 id="匹配特殊字符" tabindex="-1"><a class="header-anchor" href="#匹配特殊字符" aria-hidden="true">#</a> 匹配特殊字符</h2><p>匹配特殊字符，必须用 <code>\\\\</code> 为前导。<code>\\\\</code>-表示查找-，<code>\\\\</code>.表示查找.。</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\\\\f</code></td><td>换页</td></tr><tr><td><code>\\\\n</code></td><td>换行</td></tr><tr><td><code>\\\\r</code></td><td>回车</td></tr><tr><td><code>\\\\t</code></td><td>制表</td></tr><tr><td><code>\\\\v</code></td><td>纵向制表</td></tr></tbody></table><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where title regexp &#39;\\\\·&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查询了数据中带有 · 的数据。</p><p><img src="https://gitee.com/sue201982/mysql/raw/master/img/202110292224915.png" alt="image-20211015111836906"></p><blockquote><p>为了匹配反斜杠（\\）字符本身，需要使用<code>\\\\\\</code> 多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。但MySQL要求两个反斜杠（MySQL自己解释一个，正则表达式库解释另一个）。</p></blockquote><h2 id="匹配字符类" tabindex="-1"><a class="header-anchor" href="#匹配字符类" aria-hidden="true">#</a> 匹配字符类</h2><p>存在找出你自己经常使用的数字、所有字母字符或所有数字字母字符等的匹配。为更方便工作，可以使用预定义的字符集，称为字符类（character class）。</p><table><thead><tr><th>字符类</th><th>描述</th></tr></thead><tbody><tr><td><code>[:alnum:]</code></td><td>任意字母和数字（同<code>[a-zA-Z0-9]</code>）</td></tr><tr><td><code>[:alpha:]</code></td><td>任意字符（同<code>[a-zA-Z]</code>）</td></tr><tr><td><code>[:blank:]</code></td><td>空格和制表（同<code>[\\\\t]</code>）</td></tr><tr><td><code>[:cntrl:]</code></td><td>ASCII控制字符<code>（ASCII 0到31和127）</code></td></tr><tr><td><code>[:digit:]</code></td><td>任意数字（同<code>[0-9]</code>）</td></tr><tr><td><code>[:graph:]</code></td><td>与<code>[:print:]</code>相同，但不包括空格</td></tr><tr><td><code>[:lower:]</code></td><td>任意小写字母（同<code>[a-z]）</code></td></tr><tr><td><code>[:print:]</code></td><td>任意可打印字符</td></tr><tr><td><code>[:punct:]</code></td><td>既不在<code>[:alnum:]</code>又不在<code>[:cntrl:]</code>中的任意字符</td></tr><tr><td><code>[:space:]</code></td><td>包括空格在内的任意空白字符（同<code>[\\\\f\\\\n\\\\r\\\\t\\\\v]</code>）</td></tr><tr><td><code>[:upper:]</code></td><td>任意大写字母（同<code>[A-Z]</code>）</td></tr><tr><td><code>[:xdigit:]</code></td><td>任意十六进制数字（同<code>[a-fA-F0-9]</code>）</td></tr></tbody></table><p>使用：</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select id,title,community from houses where title regexp &#39;[:alnum:]&#39;;\nselect id,title,community from houses where description regexp &#39;[:alpha:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:blank:]&#39;;\nselect id,title,community from houses where roomTypeID regexp &#39;[:cntrl:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:digit:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:graph:]&#39;;\nselect id,title,community from houses where houseCode regexp &#39;[:lower:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:print:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:punct:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:space:]&#39;;\nselect id,title,community from houses where roomTypeID regexp &#39;[:upper:]&#39;;\nselect id,title,community from houses where title regexp &#39;[:xdigit:]&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="匹配多个实例" tabindex="-1"><a class="header-anchor" href="#匹配多个实例" aria-hidden="true">#</a> 匹配多个实例</h2><p>如果存在一个匹配，该行被检索出来，如果不存在，检索不出任何行。但有时需要对匹配的数目进行更强的控制。</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>0个或者多个匹配</td></tr><tr><td>+</td><td>1个或者多个匹配（等于{1，}）</td></tr><tr><td>?</td><td>0个或者1个匹配（等于{0，1}）</td></tr><tr><td>{n}</td><td>指定数目的匹配</td></tr><tr><td>{n，}</td><td>不少于指定数目的匹配</td></tr><tr><td>{n，m}</td><td>匹配数目的范围（m不超过255）</td></tr></tbody></table><h2 id="定位符" tabindex="-1"><a class="header-anchor" href="#定位符" aria-hidden="true">#</a> 定位符</h2><p>匹配特定位置的文本。</p><table><thead><tr><th>定位符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>文本的开始</td></tr><tr><td>$</td><td>文本的结束</td></tr><tr><td>[[:&lt;:]]</td><td>词的开始</td></tr><tr><td>[[:&gt;:]]</td><td>词的结束</td></tr></tbody></table><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>-- 查询描述中带有0-9的数字并且包含数字\nselect * from houses where description regexp &#39;^[0-9\\\\.]&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>^[0-9\\\\.]</code> 只在.或任意数字为串中第一个字符时才匹配它们。</p><p>^有两种用法。在集合中（用[和]定义），用它来否定该集合，否则，用来指串的开始处。</p><p><code>LIKE</code>和<code>REGEXP</code>的不同在于，<code>LIKE</code>匹配整个串而<code>REGEXP</code>匹配子串。利用定位符，通过用^开始每个表达式，用$结束每个表达式，可以使REGEXP的作用与LIKE一样。</p>',50),r={},a=(0,d(3744).Z)(r,[["render",function(e,t){return s}]])},3744:(e,t)=>{t.Z=(e,t)=>{const d=e.__vccOpts||e;for(const[e,s]of t)d[e]=s;return d}}}]);